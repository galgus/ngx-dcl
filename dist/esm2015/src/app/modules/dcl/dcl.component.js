import { Component, ChangeDetectionStrategy, Input, ComponentFactoryResolver, Renderer2, ElementRef, ViewContainerRef, ReflectiveInjector } from '@angular/core';
function createComponent(cfr, type, vcr, bindings, projectableNodes) {
    return vcr.createComponent(cfr.resolveComponentFactory(type), vcr.length, getInjector(vcr, bindings), projectableNodes);
}
function getInjector(viewContainer, bindings) {
    const ctxInjector = viewContainer.parentInjector;
    return (Array.isArray(bindings) && bindings.length > 0) ?
        ReflectiveInjector.fromResolvedProviders(bindings, ctxInjector) :
        ctxInjector;
}
export class DclComponent {
    constructor(_cr, _renderer, _elem, _view) {
        this._cr = _cr;
        this._renderer = _renderer;
        this._elem = _elem;
        this._view = _view;
    }
    ngOnInit() {
        if (this.type) {
            this._cmpRef = createComponent(this._cr, this.type, this._view);
            this._view.element.nativeElement.appendChild(this._cmpRef.location.nativeElement);
            if (this.init) {
                this.init(this._cmpRef, this.identifier, this.data);
            }
        }
        else {
            const text = this._renderer.createText(this.data !== null && this.data !== undefined ? this.data : '');
            this._renderer.appendChild(this._elem.nativeElement, text);
        }
    }
    ngOnChanges(changes) {
        if (this._cmpRef) {
            this._view.element.nativeElement.removeChild(this._cmpRef.location.nativeElement);
            this.ngOnInit();
        }
    }
}
DclComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-dcl',
                template: '',
                changeDetection: ChangeDetectionStrategy.OnPush
            },] }
];
DclComponent.ctorParameters = () => [
    { type: ComponentFactoryResolver },
    { type: Renderer2 },
    { type: ElementRef },
    { type: ViewContainerRef }
];
DclComponent.propDecorators = {
    type: [{ type: Input }],
    init: [{ type: Input }],
    data: [{ type: Input }],
    identifier: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGNsLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8iLCJzb3VyY2VzIjpbInNyYy9hcHAvbW9kdWxlcy9kY2wvZGNsLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUF3Qix1QkFBdUIsRUFBRSxLQUFLLEVBQy9ELHdCQUF3QixFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsZ0JBQWdCLEVBQ3ZCLGtCQUFrQixFQUM3RCxNQUFNLGVBQWUsQ0FBQztBQU12QixTQUFTLGVBQWUsQ0FDdEIsR0FBNkIsRUFDN0IsSUFBUyxFQUNULEdBQXFCLEVBQ3JCLFFBQXVDLEVBQ3ZDLGdCQUEwQjtJQUUxQixPQUFPLEdBQUcsQ0FBQyxlQUFlLENBQ3hCLEdBQUcsQ0FBQyx1QkFBdUIsQ0FBQyxJQUFJLENBQUMsRUFDakMsR0FBRyxDQUFDLE1BQU0sRUFDVixXQUFXLENBQUMsR0FBRyxFQUFFLFFBQVEsQ0FBQyxFQUMxQixnQkFBZ0IsQ0FDakIsQ0FBQztBQUNKLENBQUM7QUFFRCxTQUFTLFdBQVcsQ0FDbEIsYUFBK0IsRUFBRSxRQUF1QztJQUV4RSxNQUFNLFdBQVcsR0FBRyxhQUFhLENBQUMsY0FBYyxDQUFDO0lBQ2pELE9BQU8sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLFFBQVEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNyRCxrQkFBa0IsQ0FBQyxxQkFBcUIsQ0FBQyxRQUFRLEVBQUUsV0FBVyxDQUFDLENBQUMsQ0FBQztRQUNqRSxXQUFXLENBQUM7QUFDbEIsQ0FBQztBQVFELE1BQU0sT0FBTyxZQUFZO0lBUXZCLFlBQ1UsR0FBNkIsRUFDN0IsU0FBb0IsRUFDcEIsS0FBaUIsRUFDakIsS0FBdUI7UUFIdkIsUUFBRyxHQUFILEdBQUcsQ0FBMEI7UUFDN0IsY0FBUyxHQUFULFNBQVMsQ0FBVztRQUNwQixVQUFLLEdBQUwsS0FBSyxDQUFZO1FBQ2pCLFVBQUssR0FBTCxLQUFLLENBQWtCO0lBQzdCLENBQUM7SUFFTCxRQUFRO1FBQ04sSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFO1lBQ2IsSUFBSSxDQUFDLE9BQU8sR0FBRyxlQUFlLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNoRSxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUMxQyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQ3BDLENBQUM7WUFDRixJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUU7Z0JBQ2IsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO2FBQ3JEO1NBQ0Y7YUFBTTtZQUNMLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLEtBQUssSUFBSSxJQUFJLElBQUksQ0FBQyxJQUFJLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUN2RyxJQUFJLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUMsQ0FBQztTQUM1RDtJQUNILENBQUM7SUFFRCxXQUFXLENBQUMsT0FBNkM7UUFDdkQsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2hCLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQzFDLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FDcEMsQ0FBQztZQUNGLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztTQUNqQjtJQUNILENBQUM7OztZQTNDRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLFNBQVM7Z0JBQ25CLFFBQVEsRUFBRSxFQUFFO2dCQUNaLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO2FBRWhEOzs7WUFyQ0Msd0JBQXdCO1lBQUUsU0FBUztZQUFFLFVBQVU7WUFBRSxnQkFBZ0I7OzttQkF1Q2hFLEtBQUs7bUJBQ0wsS0FBSzttQkFDTCxLQUFLO3lCQUNMLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDb21wb25lbnQsIE9uSW5pdCwgQ29tcG9uZW50UmVmLCBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgSW5wdXQsIFR5cGUsXG4gIENvbXBvbmVudEZhY3RvcnlSZXNvbHZlciwgUmVuZGVyZXIyLCBFbGVtZW50UmVmLCBWaWV3Q29udGFpbmVyUmVmLCBPbkNoYW5nZXMsXG4gIFNpbXBsZUNoYW5nZSwgUmVzb2x2ZWRSZWZsZWN0aXZlUHJvdmlkZXIsIFJlZmxlY3RpdmVJbmplY3RvclxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuXG5leHBvcnQgdHlwZSBJbml0RnVuYyA9XG4gICAgKGNvbXBvbmVudDogQ29tcG9uZW50UmVmPGFueT4sIGlkZW50aWZpZXI6IGFueSwgZGF0YTogYW55KSA9PiB2b2lkO1xuXG5mdW5jdGlvbiBjcmVhdGVDb21wb25lbnQoXG4gIGNmcjogQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLFxuICB0eXBlOiBhbnksXG4gIHZjcjogVmlld0NvbnRhaW5lclJlZixcbiAgYmluZGluZ3M/OiBSZXNvbHZlZFJlZmxlY3RpdmVQcm92aWRlcltdLFxuICBwcm9qZWN0YWJsZU5vZGVzPzogYW55W11bXVxuKTogQ29tcG9uZW50UmVmPGFueT4ge1xuICByZXR1cm4gdmNyLmNyZWF0ZUNvbXBvbmVudChcbiAgICBjZnIucmVzb2x2ZUNvbXBvbmVudEZhY3RvcnkodHlwZSksXG4gICAgdmNyLmxlbmd0aCxcbiAgICBnZXRJbmplY3Rvcih2Y3IsIGJpbmRpbmdzKSxcbiAgICBwcm9qZWN0YWJsZU5vZGVzXG4gICk7XG59XG5cbmZ1bmN0aW9uIGdldEluamVjdG9yKFxuICB2aWV3Q29udGFpbmVyOiBWaWV3Q29udGFpbmVyUmVmLCBiaW5kaW5ncz86IFJlc29sdmVkUmVmbGVjdGl2ZVByb3ZpZGVyW11cbikge1xuICBjb25zdCBjdHhJbmplY3RvciA9IHZpZXdDb250YWluZXIucGFyZW50SW5qZWN0b3I7XG4gIHJldHVybiAoQXJyYXkuaXNBcnJheShiaW5kaW5ncykgJiYgYmluZGluZ3MubGVuZ3RoID4gMCkgP1xuICAgICAgUmVmbGVjdGl2ZUluamVjdG9yLmZyb21SZXNvbHZlZFByb3ZpZGVycyhiaW5kaW5ncywgY3R4SW5qZWN0b3IpIDpcbiAgICAgIGN0eEluamVjdG9yO1xufVxuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdhcHAtZGNsJyxcbiAgdGVtcGxhdGU6ICcnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaFxuXG59KVxuZXhwb3J0IGNsYXNzIERjbENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25DaGFuZ2VzIHtcbiAgQElucHV0KCkgcHVibGljIHR5cGU6IFR5cGU8YW55PjtcbiAgQElucHV0KCkgcHVibGljIGluaXQ6IEluaXRGdW5jO1xuICBASW5wdXQoKSBwdWJsaWMgZGF0YTogYW55O1xuICBASW5wdXQoKSBwdWJsaWMgaWRlbnRpZmllcjogYW55O1xuXG4gIHByaXZhdGUgX2NtcFJlZjogQ29tcG9uZW50UmVmPGFueT47XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBfY3I6IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcixcbiAgICBwcml2YXRlIF9yZW5kZXJlcjogUmVuZGVyZXIyLFxuICAgIHByaXZhdGUgX2VsZW06IEVsZW1lbnRSZWYsXG4gICAgcHJpdmF0ZSBfdmlldzogVmlld0NvbnRhaW5lclJlZlxuICApIHsgfVxuXG4gIG5nT25Jbml0KCkge1xuICAgIGlmICh0aGlzLnR5cGUpIHtcbiAgICAgIHRoaXMuX2NtcFJlZiA9IGNyZWF0ZUNvbXBvbmVudCh0aGlzLl9jciwgdGhpcy50eXBlLCB0aGlzLl92aWV3KTtcbiAgICAgIHRoaXMuX3ZpZXcuZWxlbWVudC5uYXRpdmVFbGVtZW50LmFwcGVuZENoaWxkKFxuICAgICAgICB0aGlzLl9jbXBSZWYubG9jYXRpb24ubmF0aXZlRWxlbWVudFxuICAgICAgKTtcbiAgICAgIGlmICh0aGlzLmluaXQpIHtcbiAgICAgICAgdGhpcy5pbml0KHRoaXMuX2NtcFJlZiwgdGhpcy5pZGVudGlmaWVyLCB0aGlzLmRhdGEpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCB0ZXh0ID0gdGhpcy5fcmVuZGVyZXIuY3JlYXRlVGV4dCh0aGlzLmRhdGEgIT09IG51bGwgJiYgdGhpcy5kYXRhICE9PSB1bmRlZmluZWQgPyB0aGlzLmRhdGEgOiAnJyk7XG4gICAgICB0aGlzLl9yZW5kZXJlci5hcHBlbmRDaGlsZCh0aGlzLl9lbGVtLm5hdGl2ZUVsZW1lbnQsIHRleHQpO1xuICAgIH1cbiAgfVxuXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IHsgW3Byb3BOYW1lOiBzdHJpbmddOiBTaW1wbGVDaGFuZ2UgfSkge1xuICAgIGlmICh0aGlzLl9jbXBSZWYpIHtcbiAgICAgIHRoaXMuX3ZpZXcuZWxlbWVudC5uYXRpdmVFbGVtZW50LnJlbW92ZUNoaWxkKFxuICAgICAgICB0aGlzLl9jbXBSZWYubG9jYXRpb24ubmF0aXZlRWxlbWVudFxuICAgICAgKTtcbiAgICAgIHRoaXMubmdPbkluaXQoKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==